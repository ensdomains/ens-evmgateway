{
  "address": "0xF7e3a2861FfA833C39544B7bbE9D94f3219E5b70",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IEVMVerifier",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "contract IDefaultReverseResolver",
          "name": "_defaultReverseResolver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CommandTooLong",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "InvalidReference",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "OffchainLookup",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        }
      ],
      "name": "ResponseLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "TooManyCommands",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extradata",
          "type": "bytes"
        }
      ],
      "name": "getStorageSlotsCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "values",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "callbackdata",
          "type": "bytes"
        }
      ],
      "name": "nameCallback",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "values",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "callbackdata",
          "type": "bytes"
        }
      ],
      "name": "textCallback",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9eac452321494e39dd3b63fcddb8c5644ac235916c8bda64712e06d77d8d317b",
  "receipt": {
    "to": null,
    "from": "0xDBBC2C0fe2a1D0fB4056B35a22e543bEb715E7FC",
    "contractAddress": "0xF7e3a2861FfA833C39544B7bbE9D94f3219E5b70",
    "transactionIndex": 96,
    "gasUsed": "2427859",
    "logsBloom": "0x
    "blockHash": "0x4fef4f8be6b37ce03c137f32111da27ea3bf4f176958d0cdac6554132cc3910e",
    "transactionHash": "0x9eac452321494e39dd3b63fcddb8c5644ac235916c8bda64712e06d77d8d317b",
    "logs": [],
    "blockNumber": 5347090,
    "cumulativeGasUsed": "10054565",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0e8DA38565915B7e74e2d78F80ba1BF815F34116",
    "0x83C058D2139a6eFA32E42BeB415409000C075563",
    "0xfD2c2598382D8876BcC70f550B22d7F70Dda30b0"
  ],
  "numDeployments": 5,
  "solcInputHash": "7cc7da1092d13c01f4d5f27229751af2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEVMVerifier\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"contract IDefaultReverseResolver\",\"name\":\"_defaultReverseResolver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CommandTooLong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"InvalidReference\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"ResponseLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"TooManyCommands\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extradata\",\"type\":\"bytes\"}],\"name\":\"getStorageSlotsCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"callbackdata\",\"type\":\"bytes\"}],\"name\":\"nameCallback\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"callbackdata\",\"type\":\"bytes\"}],\"name\":\"textCallback\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getStorageSlotsCallback(bytes,bytes)\":{\"details\":\"Internal callback function invoked by CCIP-Read in response to a `getStorageSlots` request.\"},\"resolve(bytes,bytes)\":{\"details\":\"Resolve and verify a record stored in l2 target address. It supports fallback to the default resolver\",\"params\":{\"data\":\"The actual calldata\",\"name\":\"DNS encoded ENS name to query\"},\"returns\":{\"result\":\"result of the call\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1ReverseResolver.sol\":\"L1ReverseResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n    function resolve(\\n        bytes memory name,\\n        bytes memory data\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5d81521cfae7d9a4475d27533cd8ed0d3475d369eb0674fd90ffbdbdf292faa3\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key,\\n        string value\\n    );\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7c5debb3c42cd9f5de2274ea7aa053f238608314b62db441c40e31cea2543fd5\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/utils/HexUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary HexUtils {\\n    /**\\n     * @dev Attempts to parse bytes32 from a hex string\\n     * @param str The string to parse\\n     * @param idx The offset to start parsing at\\n     * @param lastIdx The (exclusive) last index in `str` to consider. Use `str.length` to scan the whole string.\\n     */\\n    function hexStringToBytes32(\\n        bytes memory str,\\n        uint256 idx,\\n        uint256 lastIdx\\n    ) internal pure returns (bytes32 r, bool valid) {\\n        valid = true;\\n        assembly {\\n            // check that the index to read to is not past the end of the string\\n            if gt(lastIdx, mload(str)) {\\n                revert(0, 0)\\n            }\\n\\n            function getHex(c) -> ascii {\\n                // chars 48-57: 0-9\\n                if and(gt(c, 47), lt(c, 58)) {\\n                    ascii := sub(c, 48)\\n                    leave\\n                }\\n                // chars 65-70: A-F\\n                if and(gt(c, 64), lt(c, 71)) {\\n                    ascii := add(sub(c, 65), 10)\\n                    leave\\n                }\\n                // chars 97-102: a-f\\n                if and(gt(c, 96), lt(c, 103)) {\\n                    ascii := add(sub(c, 97), 10)\\n                    leave\\n                }\\n                // invalid char\\n                ascii := 0xff\\n            }\\n\\n            let ptr := add(str, 32)\\n            for {\\n                let i := idx\\n            } lt(i, lastIdx) {\\n                i := add(i, 2)\\n            } {\\n                let byte1 := getHex(byte(0, mload(add(ptr, i))))\\n                let byte2 := getHex(byte(0, mload(add(ptr, add(i, 1)))))\\n                // if either byte is invalid, set invalid and break loop\\n                if or(eq(byte1, 0xff), eq(byte2, 0xff)) {\\n                    valid := false\\n                    break\\n                }\\n                let combined := or(shl(4, byte1), byte2)\\n                r := or(shl(8, r), combined)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to parse an address from a hex string\\n     * @param str The string to parse\\n     * @param idx The offset to start parsing at\\n     * @param lastIdx The (exclusive) last index in `str` to consider. Use `str.length` to scan the whole string.\\n     */\\n    function hexToAddress(\\n        bytes memory str,\\n        uint256 idx,\\n        uint256 lastIdx\\n    ) internal pure returns (address, bool) {\\n        if (lastIdx - idx < 40) return (address(0x0), false);\\n        (bytes32 r, bool valid) = hexStringToBytes32(str, idx, lastIdx);\\n        return (address(uint160(uint256(r))), valid);\\n    }\\n}\\n\",\"keccak256\":\"0xcae20ad72181f47dfe7fba7d88e8d902a01576b16e93362878e726989d6cfb4d\",\"license\":\"MIT\"},\"@ensdomains/evm-verifier/contracts/EVMFetchTarget.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IEVMVerifier } from './IEVMVerifier.sol';\\nimport { Address } from '@openzeppelin/contracts/utils/Address.sol';\\n\\n/**\\n * @dev Callback implementation for users of `EVMFetcher`. If you use `EVMFetcher`, your contract must\\n *      inherit from this contract in order to handle callbacks correctly.\\n */\\nabstract contract EVMFetchTarget {\\n    using Address for address;\\n\\n    error ResponseLengthMismatch(uint256 actual, uint256 expected);\\n\\n    /**\\n     * @dev Internal callback function invoked by CCIP-Read in response to a `getStorageSlots` request.\\n     */\\n    function getStorageSlotsCallback(bytes calldata response, bytes calldata extradata) external {\\n        bytes memory proof = abi.decode(response, (bytes));\\n        (IEVMVerifier verifier, address addr, bytes32[] memory commands, bytes[] memory constants, bytes4 callback, bytes memory callbackData) =\\n            abi.decode(extradata, (IEVMVerifier, address, bytes32[], bytes[], bytes4, bytes));\\n        bytes[] memory values = verifier.getStorageValues(addr, commands, constants, proof);\\n        if(values.length != commands.length) {\\n            revert ResponseLengthMismatch(values.length, commands.length);\\n        }\\n        bytes memory ret = address(this).functionCall(abi.encodeWithSelector(callback, values, callbackData));\\n        assembly {\\n            return(add(ret, 32), mload(ret))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4653f974a897ce78b7bc3779ba0bb7767df99add49de4f0e9089399f47bb5942\",\"license\":\"MIT\"},\"@ensdomains/evm-verifier/contracts/EVMFetcher.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IEVMVerifier } from './IEVMVerifier.sol';\\nimport { EVMFetchTarget } from './EVMFetchTarget.sol';\\nimport { Address } from '@openzeppelin/contracts/utils/Address.sol';\\n\\ninterface IEVMGateway {\\n    function getStorageSlots(address addr, bytes32[] memory commands, bytes[] memory constants) external pure returns(bytes memory witness);\\n}\\n\\nuint8 constant FLAG_DYNAMIC = 0x01;\\nuint8 constant OP_CONSTANT = 0x00;\\nuint8 constant OP_BACKREF = 0x20;\\nuint8 constant OP_END = 0xff;\\n\\n/**\\n * @dev A library to facilitate requesting storage data proofs from contracts, possibly on a different chain.\\n *      See l1-verifier/test/TestL1.sol for example usage.\\n */\\nlibrary EVMFetcher {\\n    uint256 constant MAX_COMMANDS = 32;\\n    uint256 constant MAX_CONSTANTS = 32; // Must not be greater than 32\\n\\n    using Address for address;\\n\\n    error TooManyCommands(uint256 max);\\n    error CommandTooLong();\\n    error InvalidReference(uint256 value, uint256 max);\\n    error OffchainLookup(address sender, string[] urls, bytes callData, bytes4 callbackFunction, bytes extraData);\\n\\n    struct EVMFetchRequest {\\n        IEVMVerifier verifier;\\n        address target;\\n        bytes32[] commands;\\n        uint256 operationIdx;\\n        bytes[] constants;\\n    }\\n\\n    /**\\n     * @dev Creates a request to fetch the value of multiple storage slots from a contract via CCIP-Read, possibly from\\n     *      another chain.\\n     *      Supports dynamic length values and slot numbers derived from other retrieved values.\\n     * @param verifier An instance of a verifier contract that can provide and verify the storage slot information.\\n     * @param target The address of the contract to fetch storage proofs for.\\n     */\\n    function newFetchRequest(IEVMVerifier verifier, address target) internal pure returns (EVMFetchRequest memory) {\\n        bytes32[] memory commands = new bytes32[](MAX_COMMANDS);\\n        bytes[] memory constants = new bytes[](MAX_CONSTANTS);\\n        assembly {\\n            mstore(commands, 0) // Set current array length to 0\\n            mstore(constants, 0)\\n        }        \\n        return EVMFetchRequest(verifier, target, commands, 0, constants);\\n    }\\n\\n    /**\\n     * @dev Starts describing a new fetch request.\\n     *      Paths specify a series of hashing operations to derive the final slot ID.\\n     *      See https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html for details on how Solidity\\n     *      lays out storage variables.\\n     * @param request The request object being operated on.\\n     * @param baseSlot The base slot ID that forms the root of the path.\\n     */\\n    function getStatic(EVMFetchRequest memory request, uint256 baseSlot) internal pure returns (EVMFetchRequest memory) {\\n        bytes32[] memory commands = request.commands;\\n        uint256 commandIdx = commands.length;\\n        if(commandIdx > 0 && request.operationIdx < 32) {\\n            // Terminate previous command\\n            _addOperation(request, OP_END);\\n        }\\n        assembly {\\n            mstore(commands, add(commandIdx, 1)) // Increment command array length\\n        }\\n        if(request.commands.length > MAX_COMMANDS) {\\n            revert TooManyCommands(MAX_COMMANDS);\\n        }\\n        request.operationIdx = 0;\\n        _addOperation(request, 0);\\n        _addOperation(request, _addConstant(request, abi.encode(baseSlot)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Starts describing a new fetch request.\\n     *      Paths specify a series of hashing operations to derive the final slot ID.\\n     *      See https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html for details on how Solidity\\n     *      lays out storage variables.\\n     * @param request The request object being operated on.\\n     * @param baseSlot The base slot ID that forms the root of the path.\\n     */\\n    function getDynamic(EVMFetchRequest memory request, uint256 baseSlot) internal pure returns (EVMFetchRequest memory) {\\n        bytes32[] memory commands = request.commands;\\n        uint256 commandIdx = commands.length;\\n        if(commandIdx > 0 && request.operationIdx < 32) {\\n            // Terminate previous command\\n            _addOperation(request, OP_END);\\n        }\\n        assembly {\\n            mstore(commands, add(commandIdx, 1)) // Increment command array length\\n        }\\n        if(request.commands.length > MAX_COMMANDS) {\\n            revert TooManyCommands(MAX_COMMANDS);\\n        }\\n        request.operationIdx = 0;\\n        _addOperation(request, FLAG_DYNAMIC);\\n        _addOperation(request, _addConstant(request, abi.encode(baseSlot)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a `uint256` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(EVMFetchRequest memory request, uint256 el) internal pure returns (EVMFetchRequest memory) {\\n        if(request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, abi.encode(el)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a `bytes32` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(EVMFetchRequest memory request, bytes32 el) internal pure returns (EVMFetchRequest memory) {\\n        if(request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, abi.encode(el)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds an `address` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(EVMFetchRequest memory request, address el) internal pure returns (EVMFetchRequest memory) {\\n        if(request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, abi.encode(el)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a `bytes` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(EVMFetchRequest memory request, bytes memory el) internal pure returns (EVMFetchRequest memory) {\\n        if(request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, el));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a `string` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(EVMFetchRequest memory request, string memory el) internal pure returns (EVMFetchRequest memory) {\\n        if(request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, bytes(el)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a reference to a previous fetch to the current path.\\n     * @param request The request object being operated on.\\n     * @param idx The index of the previous fetch request, starting at 0.\\n     */\\n    function ref(EVMFetchRequest memory request, uint8 idx) internal pure returns (EVMFetchRequest memory) {\\n        if(request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        if(idx > request.commands.length || idx > 31) {\\n            revert InvalidReference(idx, request.commands.length);\\n        }\\n        _addOperation(request, OP_BACKREF | idx);\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Initiates the fetch request.\\n     *      Calling this function terminates execution; clients that implement CCIP-Read will make a callback to\\n     *      `callback` with the results of the operation.\\n     * @param callbackId A callback function selector on this contract that will be invoked via CCIP-Read with the result of the lookup.\\n     *        The function must have a signature matching `(bytes[] memory values, bytes callbackData)` with a return type matching the call in which\\n     *        this function was invoked. Its return data will be returned as the return value of the entire CCIP-read operation.\\n     * @param callbackData Extra data to supply to the callback.\\n     */\\n    function fetch(EVMFetchRequest memory request, bytes4 callbackId, bytes memory callbackData) internal view {\\n        if(request.commands.length > 0 && request.operationIdx < 32) {\\n            // Terminate last command\\n            _addOperation(request, OP_END);\\n        }\\n        revert OffchainLookup(\\n            address(this),\\n            request.verifier.gatewayURLs(),\\n            abi.encodeCall(IEVMGateway.getStorageSlots, (request.target, request.commands, request.constants)),\\n            EVMFetchTarget.getStorageSlotsCallback.selector,\\n            abi.encode(request.verifier, request.target, request.commands, request.constants, callbackId, callbackData)\\n        );\\n    }\\n\\n    function _addConstant(EVMFetchRequest memory request, bytes memory value) private pure returns(uint8 idx) {\\n        bytes[] memory constants = request.constants;\\n        idx = uint8(constants.length);\\n        assembly {\\n            mstore(constants, add(idx, 1)) // Increment constant array length\\n        }\\n        constants[idx] = value;\\n    }\\n\\n    function _addOperation(EVMFetchRequest memory request, uint8 op) private pure {\\n        uint256 commandIdx = request.commands.length - 1;\\n        request.commands[commandIdx] = request.commands[commandIdx] | (bytes32(bytes1(op)) >> (8 * request.operationIdx++));\\n    }\\n}\\n\",\"keccak256\":\"0x5a6a955ebf3e6da9ce8d39e2729c35e4e800426025954a9a9777c209447ff8b4\",\"license\":\"MIT\"},\"@ensdomains/evm-verifier/contracts/IEVMVerifier.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IEVMVerifier {\\n    function gatewayURLs() external view returns(string[] memory);\\n    function getStorageValues(address target, bytes32[] memory commands, bytes[] memory constants, bytes memory proof) external view returns(bytes[] memory values);\\n}\\n\",\"keccak256\":\"0x30a635309aeebbde83774010eea5e975b8e73d1932140457121eefdce7792d72\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/IDefaultReverseResolver.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IDefaultReverseResolver {\\n    function name(address addr) external view returns (string memory);\\n\\n    function text(\\n        address addr,\\n        string memory key\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x0233c067351640bcfff8824150323e34f06abf239def880164a10eb8846479cf\"},\"contracts/L1ReverseResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {EVMFetcher} from '@ensdomains/evm-verifier/contracts/EVMFetcher.sol';\\nimport {EVMFetchTarget} from '@ensdomains/evm-verifier/contracts/EVMFetchTarget.sol';\\nimport {IEVMVerifier} from '@ensdomains/evm-verifier/contracts/IEVMVerifier.sol';\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/INameResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/utils/HexUtils.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol\\\";\\nimport \\\"./IDefaultReverseResolver.sol\\\";\\n\\ncontract L1ReverseResolver is EVMFetchTarget, IExtendedResolver, ERC165 {\\n    using EVMFetcher for EVMFetcher.EVMFetchRequest;\\n    IEVMVerifier immutable verifier;\\n    address immutable target;\\n    IDefaultReverseResolver immutable defaultReverseResolver;\\n    uint256 constant VERSIONABLE_TEXTS_SLOT = 2;\\n    uint256 constant VERSIONABLE_NAME_SLOT = 3;\\n    uint256 constant RECORD_VERSIONS_SLOT = 4;\\n    uint256 constant ADDRESS_LENGTH = 40;\\n    using HexUtils for bytes;\\n\\n    constructor(IEVMVerifier _verifier, address _target, IDefaultReverseResolver _defaultReverseResolver ) {\\n        verifier = _verifier;\\n        target = _target;\\n        defaultReverseResolver = _defaultReverseResolver;\\n    }\\n\\n    /** \\n     * @dev Resolve and verify a record stored in l2 target address. It supports fallback to the default resolver\\n     * @param name DNS encoded ENS name to query\\n     * @param data The actual calldata\\n     * @return result result of the call\\n     */\\n    function resolve(bytes calldata name, bytes calldata data) external view returns (bytes memory result) {\\n        bytes4 selector = bytes4(data);\\n        (address addr,) = HexUtils.hexToAddress(name, 1, ADDRESS_LENGTH + 1);\\n        if (selector == INameResolver.name.selector) {\\n            (bytes32 node) = abi.decode(data[4:], (bytes32));\\n            return bytes(_name(node, addr));\\n        }\\n        if (selector == ITextResolver.text.selector) {\\n            (bytes32 node, string memory key) = abi.decode(data[4:], (bytes32, string));\\n            return bytes(_text(node, key, addr));\\n        }\\n    }\\n\\n    function _name(bytes32 node, address addr) private view returns (string memory) {\\n        EVMFetcher.newFetchRequest(verifier, target)\\n            .getStatic(RECORD_VERSIONS_SLOT)\\n              .element(node)\\n            .getDynamic(VERSIONABLE_NAME_SLOT)\\n              .ref(0)\\n              .element(node)\\n            .fetch(this.nameCallback.selector, abi.encode(addr));\\n    }\\n\\n    function nameCallback(\\n        bytes[] memory values,\\n        bytes memory callbackdata\\n    ) public view returns (string memory) {        \\n        if(values[1].length == 0 ){\\n            (address addr) = abi.decode(callbackdata, (address));\\n            return defaultReverseResolver.name(addr);\\n        }else{\\n            return string(values[1]);\\n        }\\n    }\\n\\n    function _text(\\n        bytes32 node,\\n        string memory key,\\n        address addr\\n    ) private view returns (string memory) {\\n        EVMFetcher.newFetchRequest(verifier, target)\\n            .getStatic(RECORD_VERSIONS_SLOT)\\n              .element(node)\\n            .getDynamic(VERSIONABLE_TEXTS_SLOT)\\n              .ref(0)\\n              .element(node)\\n              .element(key)\\n            .fetch(this.textCallback.selector, abi.encode(addr, key));\\n    }\\n\\n    function textCallback(\\n        bytes[] memory values,\\n        bytes memory callbackdata\\n    ) public view returns (string memory) {\\n        if(values[1].length == 0 ){\\n            (address addr, string memory key) = abi.decode(callbackdata, (address, string));\\n            return defaultReverseResolver.text(addr, key);\\n        }else{\\n            return string(values[1]);\\n        }\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public override view returns (bool) {\\n        return\\n            interfaceId == type(IExtendedResolver).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xb09771bfaf5dd9a01da9efecfbc15abc43a85501d9264c23895bbbf6edf8637a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806301ffc9a71461005c5780632682dd661461008c5780635bdaa916146100bc5780639061b923146100d8578063de9abe5e14610108575b600080fd5b6100766004803603810190610071919061142f565b610138565b6040516100839190611477565b60405180910390f35b6100a660048036038101906100a191906116be565b6101b2565b6040516100b391906117b5565b60405180910390f35b6100d660048036038101906100d19190611832565b6102bc565b005b6100f260048036038101906100ed9190611832565b61046b565b6040516100ff9190611908565b60405180910390f35b610122600480360381019061011d91906116be565b6105f7565b60405161012f91906117b5565b60405180910390f35b60007f9061b923000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806101ab57506101aa82610707565b5b9050919050565b60606000836001815181106101ca576101c961192a565b5b60200260200101515103610297576000828060200190518101906101ee91906119b7565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166301984892826040518263ffffffff1660e01b81526004016102499190611a05565b600060405180830381865afa158015610266573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061028f9190611ac1565b9150506102b6565b826001815181106102ab576102aa61192a565b5b602002602001015190505b92915050565b600084848101906102cd9190611b0a565b905060008060008060008088888101906102e79190611c9f565b95509550955095509550955060008673ffffffffffffffffffffffffffffffffffffffff16633baa6d508787878c6040518563ffffffff1660e01b81526004016103349493929190611f4a565b600060405180830381865afa158015610351573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061037a91906120c9565b905084518151146103c657805185516040517f291894250000000000000000000000000000000000000000000000000000000081526004016103bd92919061212b565b60405180910390fd5b60006104618483856040516024016103df929190612154565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050503073ffffffffffffffffffffffffffffffffffffffff1661077190919063ffffffff16565b9050805160208201f35b6060600083839061047c91906121a3565b905060006104dc87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505060018060286104d79190612231565b6107bd565b50905063691f343160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603610563576000858560049080926105409392919061226f565b81019061054d91906122aa565b90506105598183610806565b93505050506105ef565b6359d1d43c60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036105ec57600080868660049080926105c59392919061226f565b8101906105d29190612347565b915091506105e18282856108ef565b9450505050506105ef565b50505b949350505050565b606060008360018151811061060f5761060e61192a565b5b602002602001015151036106e2576000808380602001905181019061063491906123a3565b915091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d977f6b583836040518363ffffffff1660e01b81526004016106939291906123ff565b600060405180830381865afa1580156106b0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106d99190611ac1565b92505050610701565b826001815181106106f6576106f561192a565b5b602002602001015190505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60606107b5838360006040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506109ed565b905092915050565b600080602884846107ce919061242f565b10156107e057600080915091506107fe565b6000806107ee878787610aba565b915091508160001c819350935050505b935093915050565b60606108e9632682dd6660e01b836040516020016108249190611a05565b6040516020818303038152906040526108da866108cc60006108be60036108b08c6108a260046108947f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610b9f565b610cae90919063ffffffff16565b610d8f90919063ffffffff16565b610e1090919063ffffffff16565b610ef190919063ffffffff16565b610d8f90919063ffffffff16565b610faf9092919063ffffffff16565b92915050565b60606109e663de9abe5e60e01b838560405160200161090f9291906123ff565b6040516020818303038152906040526109d7866109c9896109bb60006109ad600261099f8f61099160046109837f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610b9f565b610cae90919063ffffffff16565b610d8f90919063ffffffff16565b610e1090919063ffffffff16565b610ef190919063ffffffff16565b610d8f90919063ffffffff16565b61113a90919063ffffffff16565b610faf9092919063ffffffff16565b9392505050565b606082471015610a32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a29906124d5565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610a5b9190612531565b60006040518083038185875af1925050503d8060008114610a98576040519150601f19603f3d011682016040523d82523d6000602084013e610a9d565b606091505b5091509150610aae8783838761119c565b92505050949350505050565b600080600190508451831115610acf57600080fd5b610b31565b6000603a8210602f83111615610aef57603082039050610b2c565b60478210604083111615610b0b57600a60418303019050610b2c565b60678210606083111615610b2757600a60618303019050610b2c565b60ff90505b919050565b60208501845b84811015610b9557610b4e8183015160001a610ad4565b610b606001830184015160001a610ad4565b60ff811460ff83141715610b7957600094505050610b95565b808260041b17808760081b179650505050600281019050610b37565b5050935093915050565b610ba7611368565b6000602067ffffffffffffffff811115610bc457610bc36114a8565b5b604051908082528060200260200182016040528015610bf25781602001602082028036833780820191505090505b5090506000602067ffffffffffffffff811115610c1257610c116114a8565b5b604051908082528060200260200182016040528015610c4557816020015b6060815260200190600190039081610c305790505b50905060008252600081526040518060a001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160008152602001828152509250505092915050565b610cb6611368565b600083604001519050600081519050600081118015610cd9575060208560600151105b15610cea57610ce98560ff611211565b5b60018101825260208560400151511115610d3c5760206040517f128e7008000000000000000000000000000000000000000000000000000000008152600401610d339190612548565b60405180910390fd5b6000856060018181525050610d52856000611211565b610d8485610d7f8787604051602001610d6b9190612548565b6040516020818303038152906040526112b8565b611211565b849250505092915050565b610d97611368565b6020836060015110610dd5576040517fb00fd63800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e0783610e028585604051602001610dee9190612572565b6040516020818303038152906040526112b8565b611211565b82905092915050565b610e18611368565b600083604001519050600081519050600081118015610e3b575060208560600151105b15610e4c57610e4b8560ff611211565b5b60018101825260208560400151511115610e9e5760206040517f128e7008000000000000000000000000000000000000000000000000000000008152600401610e959190612548565b60405180910390fd5b6000856060018181525050610eb4856001611211565b610ee685610ee18787604051602001610ecd9190612548565b6040516020818303038152906040526112b8565b611211565b849250505092915050565b610ef9611368565b6020836060015110610f37576040517fb00fd63800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8260400151518260ff161180610f505750601f8260ff16115b15610f9957818360400151516040517f101586e0000000000000000000000000000000000000000000000000000000008152600401610f909291906125d5565b60405180910390fd5b610fa68383602017611211565b82905092915050565b6000836040015151118015610fc8575060208360600151105b15610fd957610fd88360ff611211565b5b30836000015173ffffffffffffffffffffffffffffffffffffffff1663b50f2fbc6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611029573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061105291906126df565b84602001518560400151866080015160405160240161107393929190612728565b60405160208183030381529060405263ea9cd3bf60e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050635bdaa91660e01b866000015187602001518860400151896080015189896040516020016110eb969594939291906127d1565b6040516020818303038152906040526040517f556f1830000000000000000000000000000000000000000000000000000000008152600401611131959493929190612953565b60405180910390fd5b611142611368565b6020836060015110611180576040517fb00fd63800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111938361118e85856112b8565b611211565b82905092915050565b606083156111fe5760008351036111f6576111b6856112f5565b6111f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ec90612a07565b60405180910390fd5b5b829050611209565b6112088383611318565b5b949350505050565b60006001836040015151611225919061242f565b905082606001805180919061123990612a27565b81525060086112489190612a6f565b8260f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c836040015182815181106112875761128661192a565b5b602002602001015117836040015182815181106112a7576112a661192a565b5b602002602001018181525050505050565b600080836080015190508051915060018201815282818360ff16815181106112e3576112e261192a565b5b60200260200101819052505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008251111561132b5781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135f91906117b5565b60405180910390fd5b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001606081525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61140c816113d7565b811461141757600080fd5b50565b60008135905061142981611403565b92915050565b600060208284031215611445576114446113cd565b5b60006114538482850161141a565b91505092915050565b60008115159050919050565b6114718161145c565b82525050565b600060208201905061148c6000830184611468565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6114e082611497565b810181811067ffffffffffffffff821117156114ff576114fe6114a8565b5b80604052505050565b60006115126113c3565b905061151e82826114d7565b919050565b600067ffffffffffffffff82111561153e5761153d6114a8565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff821115611574576115736114a8565b5b61157d82611497565b9050602081019050919050565b82818337600083830152505050565b60006115ac6115a784611559565b611508565b9050828152602081018484840111156115c8576115c7611554565b5b6115d384828561158a565b509392505050565b600082601f8301126115f0576115ef611492565b5b8135611600848260208601611599565b91505092915050565b600061161c61161784611523565b611508565b9050808382526020820190506020840283018581111561163f5761163e61154f565b5b835b8181101561168657803567ffffffffffffffff81111561166457611663611492565b5b80860161167189826115db565b85526020850194505050602081019050611641565b5050509392505050565b600082601f8301126116a5576116a4611492565b5b81356116b5848260208601611609565b91505092915050565b600080604083850312156116d5576116d46113cd565b5b600083013567ffffffffffffffff8111156116f3576116f26113d2565b5b6116ff85828601611690565b925050602083013567ffffffffffffffff8111156117205761171f6113d2565b5b61172c858286016115db565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611770578082015181840152602081019050611755565b60008484015250505050565b600061178782611736565b6117918185611741565b93506117a1818560208601611752565b6117aa81611497565b840191505092915050565b600060208201905081810360008301526117cf818461177c565b905092915050565b600080fd5b60008083601f8401126117f2576117f1611492565b5b8235905067ffffffffffffffff81111561180f5761180e6117d7565b5b60208301915083600182028301111561182b5761182a61154f565b5b9250929050565b6000806000806040858703121561184c5761184b6113cd565b5b600085013567ffffffffffffffff81111561186a576118696113d2565b5b611876878288016117dc565b9450945050602085013567ffffffffffffffff811115611899576118986113d2565b5b6118a5878288016117dc565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b60006118da826118b3565b6118e481856118be565b93506118f4818560208601611752565b6118fd81611497565b840191505092915050565b6000602082019050818103600083015261192281846118cf565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061198482611959565b9050919050565b61199481611979565b811461199f57600080fd5b50565b6000815190506119b18161198b565b92915050565b6000602082840312156119cd576119cc6113cd565b5b60006119db848285016119a2565b91505092915050565b60006119ef82611959565b9050919050565b6119ff816119e4565b82525050565b6000602082019050611a1a60008301846119f6565b92915050565b600067ffffffffffffffff821115611a3b57611a3a6114a8565b5b611a4482611497565b9050602081019050919050565b6000611a64611a5f84611a20565b611508565b905082815260208101848484011115611a8057611a7f611554565b5b611a8b848285611752565b509392505050565b600082601f830112611aa857611aa7611492565b5b8151611ab8848260208601611a51565b91505092915050565b600060208284031215611ad757611ad66113cd565b5b600082015167ffffffffffffffff811115611af557611af46113d2565b5b611b0184828501611a93565b91505092915050565b600060208284031215611b2057611b1f6113cd565b5b600082013567ffffffffffffffff811115611b3e57611b3d6113d2565b5b611b4a848285016115db565b91505092915050565b6000611b5e826119e4565b9050919050565b611b6e81611b53565b8114611b7957600080fd5b50565b600081359050611b8b81611b65565b92915050565b600081359050611ba08161198b565b92915050565b600067ffffffffffffffff821115611bc157611bc06114a8565b5b602082029050602081019050919050565b6000819050919050565b611be581611bd2565b8114611bf057600080fd5b50565b600081359050611c0281611bdc565b92915050565b6000611c1b611c1684611ba6565b611508565b90508083825260208201905060208402830185811115611c3e57611c3d61154f565b5b835b81811015611c675780611c538882611bf3565b845260208401935050602081019050611c40565b5050509392505050565b600082601f830112611c8657611c85611492565b5b8135611c96848260208601611c08565b91505092915050565b60008060008060008060c08789031215611cbc57611cbb6113cd565b5b6000611cca89828a01611b7c565b9650506020611cdb89828a01611b91565b955050604087013567ffffffffffffffff811115611cfc57611cfb6113d2565b5b611d0889828a01611c71565b945050606087013567ffffffffffffffff811115611d2957611d286113d2565b5b611d3589828a01611690565b9350506080611d4689828a0161141a565b92505060a087013567ffffffffffffffff811115611d6757611d666113d2565b5b611d7389828a016115db565b9150509295509295509295565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611db581611bd2565b82525050565b6000611dc78383611dac565b60208301905092915050565b6000602082019050919050565b6000611deb82611d80565b611df58185611d8b565b9350611e0083611d9c565b8060005b83811015611e31578151611e188882611dbb565b9750611e2383611dd3565b925050600181019050611e04565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000611e86826118b3565b611e908185611e6a565b9350611ea0818560208601611752565b611ea981611497565b840191505092915050565b6000611ec08383611e7b565b905092915050565b6000602082019050919050565b6000611ee082611e3e565b611eea8185611e49565b935083602082028501611efc85611e5a565b8060005b85811015611f385784840389528151611f198582611eb4565b9450611f2483611ec8565b925060208a01995050600181019050611f00565b50829750879550505050505092915050565b6000608082019050611f5f60008301876119f6565b8181036020830152611f718186611de0565b90508181036040830152611f858185611ed5565b90508181036060830152611f9981846118cf565b905095945050505050565b6000611fb7611fb284611559565b611508565b905082815260208101848484011115611fd357611fd2611554565b5b611fde848285611752565b509392505050565b600082601f830112611ffb57611ffa611492565b5b815161200b848260208601611fa4565b91505092915050565b600061202761202284611523565b611508565b9050808382526020820190506020840283018581111561204a5761204961154f565b5b835b8181101561209157805167ffffffffffffffff81111561206f5761206e611492565b5b80860161207c8982611fe6565b8552602085019450505060208101905061204c565b5050509392505050565b600082601f8301126120b0576120af611492565b5b81516120c0848260208601612014565b91505092915050565b6000602082840312156120df576120de6113cd565b5b600082015167ffffffffffffffff8111156120fd576120fc6113d2565b5b6121098482850161209b565b91505092915050565b6000819050919050565b61212581612112565b82525050565b6000604082019050612140600083018561211c565b61214d602083018461211c565b9392505050565b6000604082019050818103600083015261216e8185611ed5565b9050818103602083015261218281846118cf565b90509392505050565b600082905092915050565b600082821b905092915050565b60006121af838361218b565b826121ba81356113d7565b925060048210156121fa576121f57fffffffff0000000000000000000000000000000000000000000000000000000083600403600802612196565b831692505b505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061223c82612112565b915061224783612112565b925082820190508082111561225f5761225e612202565b5b92915050565b600080fd5b600080fd5b6000808585111561228357612282612265565b5b838611156122945761229361226a565b5b6001850283019150848603905094509492505050565b6000602082840312156122c0576122bf6113cd565b5b60006122ce84828501611bf3565b91505092915050565b60006122ea6122e584611a20565b611508565b90508281526020810184848401111561230657612305611554565b5b61231184828561158a565b509392505050565b600082601f83011261232e5761232d611492565b5b813561233e8482602086016122d7565b91505092915050565b6000806040838503121561235e5761235d6113cd565b5b600061236c85828601611bf3565b925050602083013567ffffffffffffffff81111561238d5761238c6113d2565b5b61239985828601612319565b9150509250929050565b600080604083850312156123ba576123b96113cd565b5b60006123c8858286016119a2565b925050602083015167ffffffffffffffff8111156123e9576123e86113d2565b5b6123f585828601611a93565b9150509250929050565b600060408201905061241460008301856119f6565b8181036020830152612426818461177c565b90509392505050565b600061243a82612112565b915061244583612112565b925082820390508181111561245d5761245c612202565b5b92915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006124bf602683611741565b91506124ca82612463565b604082019050919050565b600060208201905081810360008301526124ee816124b2565b9050919050565b600081905092915050565b600061250b826118b3565b61251581856124f5565b9350612525818560208601611752565b80840191505092915050565b600061253d8284612500565b915081905092915050565b600060208201905061255d600083018461211c565b92915050565b61256c81611bd2565b82525050565b60006020820190506125876000830184612563565b92915050565b600060ff82169050919050565b6000819050919050565b60006125bf6125ba6125b58461258d565b61259a565b612112565b9050919050565b6125cf816125a4565b82525050565b60006040820190506125ea60008301856125c6565b6125f7602083018461211c565b9392505050565b600067ffffffffffffffff821115612619576126186114a8565b5b602082029050602081019050919050565b600061263d612638846125fe565b611508565b905080838252602082019050602084028301858111156126605761265f61154f565b5b835b818110156126a757805167ffffffffffffffff81111561268557612684611492565b5b8086016126928982611a93565b85526020850194505050602081019050612662565b5050509392505050565b600082601f8301126126c6576126c5611492565b5b81516126d684826020860161262a565b91505092915050565b6000602082840312156126f5576126f46113cd565b5b600082015167ffffffffffffffff811115612713576127126113d2565b5b61271f848285016126b1565b91505092915050565b600060608201905061273d60008301866119f6565b818103602083015261274f8185611de0565b905081810360408301526127638184611ed5565b9050949350505050565b600061278861278361277e84611959565b61259a565b611959565b9050919050565b600061279a8261276d565b9050919050565b60006127ac8261278f565b9050919050565b6127bc816127a1565b82525050565b6127cb816113d7565b82525050565b600060c0820190506127e660008301896127b3565b6127f360208301886119f6565b81810360408301526128058187611de0565b905081810360608301526128198186611ed5565b905061282860808301856127c2565b81810360a083015261283a81846118cf565b9050979650505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061288f82611736565b6128998185612873565b93506128a9818560208601611752565b6128b281611497565b840191505092915050565b60006128c98383612884565b905092915050565b6000602082019050919050565b60006128e982612847565b6128f38185612852565b93508360208202850161290585612863565b8060005b85811015612941578484038952815161292285826128bd565b945061292d836128d1565b925060208a01995050600181019050612909565b50829750879550505050505092915050565b600060a08201905061296860008301886119f6565b818103602083015261297a81876128de565b9050818103604083015261298e81866118cf565b905061299d60608301856127c2565b81810360808301526129af81846118cf565b90509695505050505050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006129f1601d83611741565b91506129fc826129bb565b602082019050919050565b60006020820190508181036000830152612a20816129e4565b9050919050565b6000612a3282612112565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a6457612a63612202565b5b600182019050919050565b6000612a7a82612112565b9150612a8583612112565b9250828202612a9381612112565b91508282048414831517612aaa57612aa9612202565b5b509291505056fea264697066735822122030d2d39c55db05e43cc7652a743f9fc5c103fc49663b9a67ee668dfb221e9f0c64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getStorageSlotsCallback(bytes,bytes)": {
        "details": "Internal callback function invoked by CCIP-Read in response to a `getStorageSlots` request."
      },
      "resolve(bytes,bytes)": {
        "details": "Resolve and verify a record stored in l2 target address. It supports fallback to the default resolver",
        "params": {
          "data": "The actual calldata",
          "name": "DNS encoded ENS name to query"
        },
        "returns": {
          "result": "result of the call"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}