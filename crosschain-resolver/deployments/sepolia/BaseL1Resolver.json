{
  "address": "0xF6EfB10e47d6D4C1023BBFa5e6396B00915FbD41",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IEVMVerifier",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "contract ENS",
          "name": "_ens",
          "type": "address"
        },
        {
          "internalType": "contract INameWrapper",
          "name": "_nameWrapper",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_graphqlUrl",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_l2ResolverCoinType",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CommandTooLong",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "InvalidReference",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "OffchainLookup",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        }
      ],
      "name": "ResponseLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "TooManyCommands",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "graphqlUrl",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "storageType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "storageLocation",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        }
      ],
      "name": "MetadataChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "TargetSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "values",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "addrCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "values",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "addrCoinTypeCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "values",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "contenthashCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extradata",
          "type": "bytes"
        }
      ],
      "name": "getStorageSlotsCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        }
      ],
      "name": "getTarget",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "graphqlUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2ResolverCoinType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nameWrapper",
      "outputs": [
        {
          "internalType": "contract INameWrapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "setTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "values",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "textCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract IEVMVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x250abeb447efb1a4849a325377ec80d2412e7299f774bfafd4d18a702746fe75",
  "receipt": {
    "to": null,
    "from": "0xDBBC2C0fe2a1D0fB4056B35a22e543bEb715E7FC",
    "contractAddress": "0xF6EfB10e47d6D4C1023BBFa5e6396B00915FbD41",
    "transactionIndex": 59,
    "gasUsed": "2202583",
    "logsBloom": "0x
    "blockHash": "0x08503b4a9e0b3f441ac4dadd7d91d39456fc1b764d4766fb025f471307ae2a76",
    "transactionHash": "0x250abeb447efb1a4849a325377ec80d2412e7299f774bfafd4d18a702746fe75",
    "logs": [],
    "blockNumber": 5133267,
    "cumulativeGasUsed": "11459557",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAdef74372444e716C0473dEe1F9Cb3108EFa3818",
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    "0x0635513f179D50A207757E05759CbD106d7dFcE8",
    "https://api.studio.thegraph.com/query/1397/ens-base-sepolia/version/latest",
    2147568180
  ],
  "numDeployments": 1,
  "solcInputHash": "f62af331815cb4e74689ba5fa814dd3e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEVMVerifier\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"},{\"internalType\":\"contract INameWrapper\",\"name\":\"_nameWrapper\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_graphqlUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_l2ResolverCoinType\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CommandTooLong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"InvalidReference\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"ResponseLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"TooManyCommands\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"graphqlUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"storageType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"storageLocation\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"}],\"name\":\"MetadataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"TargetSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"addrCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"addrCoinTypeCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"contenthashCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extradata\",\"type\":\"bytes\"}],\"name\":\"getStorageSlotsCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"getTarget\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"graphqlUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2ResolverCoinType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameWrapper\",\"outputs\":[{\"internalType\":\"contract INameWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"setTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"textCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IEVMVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_ens\":\"The ENS registry address\",\"_graphqlUrl\":\"The offchain/l2 graphql endpoint url\",\"_l2ResolverCoinType\":\"The chainId at which the resolver resolves data from. 0 if storageLocation is offChain\",\"_nameWrapper\":\"The ENS name wrapper address\",\"_verifier\":\"The chain verifier address\"}},\"getStorageSlotsCallback(bytes,bytes)\":{\"details\":\"Internal callback function invoked by CCIP-Read in response to a `getStorageSlots` request.\"},\"getTarget(bytes)\":{\"details\":\"Returns the L2 target address that can answer queries for `name`.\",\"params\":{\"name\":\"DNS encoded ENS name to query\"},\"returns\":{\"node\":\"The node of the name\",\"target\":\"The L2 resolver address to verify against.\"}},\"metadata(bytes)\":{\"details\":\"This function provides metadata about the L1 Resolver, including its name, coin type, GraphQL URL, storage type, and encoded information.\",\"params\":{\"name\":\"The domain name in format (dnsEncoded)\"},\"returns\":{\"_0\":\"coinType The cointype of the chain the target contract locates such as Optimism, Base, Arb, etc\",\"_1\":\"graphqlUrl The GraphQL URL used by the resolver\",\"_2\":\"storageType Storage Type (0 for EVM)\",\"_3\":\"storageLocation The storage identifier. For EVM chains, this is the address of the resolver contract.\",\"_4\":\"context. An identifier used by l2 graph indexer for Domain schema id (`context-namehash`) allowing multiple resolver contracts to have own namespace.\"}},\"resolve(bytes,bytes)\":{\"details\":\"Resolve and verify a record stored in l2 target address. It supports subname by fetching target recursively to the nearlest parent.\",\"params\":{\"data\":\"The actual calldata\",\"name\":\"DNS encoded ENS name to query\"},\"returns\":{\"result\":\"result of the call\"}},\"setTarget(bytes,address)\":{\"params\":{\"name\":\"The encoded name to query.\",\"target\":\"The L2 resolver address to verify against.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"metadata(bytes)\":{\"notice\":\"Get metadata about the L1 Resolver\"},\"setTarget(bytes,address)\":{\"notice\":\"Set target address to verify aagainst\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1Resolver.sol\":\"L1Resolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@ensdomains/ens-contracts/contracts/dnssec-oracle/BytesUtils.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nlibrary BytesUtils {\\n    error OffsetOutOfBoundsError(uint256 offset, uint256 length);\\n\\n    /*\\n     * @dev Returns the keccak-256 hash of a byte range.\\n     * @param self The byte string to hash.\\n     * @param offset The position to start hashing at.\\n     * @param len The number of bytes to hash.\\n     * @return The hash of the byte range.\\n     */\\n    function keccak(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two bytes are equal.\\n     * @param self The first bytes to compare.\\n     * @param other The second bytes to compare.\\n     * @return The result of the comparison.\\n     */\\n    function compare(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (int256) {\\n        return compare(self, 0, self.length, other, 0, other.length);\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two bytes are equal. Comparison is done per-rune,\\n     *      on unicode codepoints.\\n     * @param self The first bytes to compare.\\n     * @param offset The offset of self.\\n     * @param len    The length of self.\\n     * @param other The second bytes to compare.\\n     * @param otheroffset The offset of the other string.\\n     * @param otherlen    The length of the other string.\\n     * @return The result of the comparison.\\n     */\\n    function compare(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len,\\n        bytes memory other,\\n        uint256 otheroffset,\\n        uint256 otherlen\\n    ) internal pure returns (int256) {\\n        if (offset + len > self.length) {\\n            revert OffsetOutOfBoundsError(offset + len, self.length);\\n        }\\n        if (otheroffset + otherlen > other.length) {\\n            revert OffsetOutOfBoundsError(otheroffset + otherlen, other.length);\\n        }\\n\\n        uint256 shortest = len;\\n        if (otherlen < len) shortest = otherlen;\\n\\n        uint256 selfptr;\\n        uint256 otherptr;\\n\\n        assembly {\\n            selfptr := add(self, add(offset, 32))\\n            otherptr := add(other, add(otheroffset, 32))\\n        }\\n        for (uint256 idx = 0; idx < shortest; idx += 32) {\\n            uint256 a;\\n            uint256 b;\\n            assembly {\\n                a := mload(selfptr)\\n                b := mload(otherptr)\\n            }\\n            if (a != b) {\\n                // Mask out irrelevant bytes and check again\\n                uint256 mask;\\n                if (shortest - idx >= 32) {\\n                    mask = type(uint256).max;\\n                } else {\\n                    mask = ~(2 ** (8 * (idx + 32 - shortest)) - 1);\\n                }\\n                int256 diff = int256(a & mask) - int256(b & mask);\\n                if (diff != 0) return diff;\\n            }\\n            selfptr += 32;\\n            otherptr += 32;\\n        }\\n\\n        return int256(len) - int256(otherlen);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @param otherOffset The offset into the second byte range.\\n     * @param len The number of bytes to compare\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other,\\n        uint256 otherOffset,\\n        uint256 len\\n    ) internal pure returns (bool) {\\n        return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal with offsets.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @param otherOffset The offset into the second byte range.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other,\\n        uint256 otherOffset\\n    ) internal pure returns (bool) {\\n        return\\n            keccak(self, offset, self.length - offset) ==\\n            keccak(other, otherOffset, other.length - otherOffset);\\n    }\\n\\n    /*\\n     * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n     *      they are equal.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        return\\n            self.length == offset + other.length &&\\n            equals(self, offset, other, 0, other.length);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal.\\n     * @param self The first byte range to compare.\\n     * @param other The second byte range to compare.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        return\\n            self.length == other.length &&\\n            equals(self, 0, other, 0, self.length);\\n    }\\n\\n    /*\\n     * @dev Returns the 8-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 8 bits of the string, interpreted as an integer.\\n     */\\n    function readUint8(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint8 ret) {\\n        return uint8(self[idx]);\\n    }\\n\\n    /*\\n     * @dev Returns the 16-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 16 bits of the string, interpreted as an integer.\\n     */\\n    function readUint16(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint16 ret) {\\n        require(idx + 2 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bits of the string, interpreted as an integer.\\n     */\\n    function readUint32(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint32 ret) {\\n        require(idx + 4 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32 byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytes32(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes32 ret) {\\n        require(idx + 32 <= self.length);\\n        assembly {\\n            ret := mload(add(add(self, 32), idx))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32 byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytes20(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes20 ret) {\\n        require(idx + 20 <= self.length);\\n        assembly {\\n            ret := and(\\n                mload(add(add(self, 32), idx)),\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the n byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes.\\n     * @param len The number of bytes.\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytesN(\\n        bytes memory self,\\n        uint256 idx,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(len <= 32);\\n        require(idx + len <= self.length);\\n        assembly {\\n            let mask := not(sub(exp(256, sub(32, len)), 1))\\n            ret := and(mload(add(add(self, 32), idx)), mask)\\n        }\\n    }\\n\\n    function memcpy(uint256 dest, uint256 src, uint256 len) private pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint256 mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n\\n    /*\\n     * @dev Copies a substring into a new byte string.\\n     * @param self The byte string to copy from.\\n     * @param offset The offset to start copying at.\\n     * @param len The number of bytes to copy.\\n     */\\n    function substring(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes memory) {\\n        require(offset + len <= self.length);\\n\\n        bytes memory ret = new bytes(len);\\n        uint256 dest;\\n        uint256 src;\\n\\n        assembly {\\n            dest := add(ret, 32)\\n            src := add(add(self, 32), offset)\\n        }\\n        memcpy(dest, src, len);\\n\\n        return ret;\\n    }\\n\\n    // Maps characters from 0x30 to 0x7A to their base32 values.\\n    // 0xFF represents invalid characters in that range.\\n    bytes constant base32HexTable =\\n        hex\\\"00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\\\";\\n\\n    /**\\n     * @dev Decodes unpadded base32 data of up to one word in length.\\n     * @param self The data to decode.\\n     * @param off Offset into the string to start at.\\n     * @param len Number of characters to decode.\\n     * @return The decoded data, left aligned.\\n     */\\n    function base32HexDecodeWord(\\n        bytes memory self,\\n        uint256 off,\\n        uint256 len\\n    ) internal pure returns (bytes32) {\\n        require(len <= 52);\\n\\n        uint256 ret = 0;\\n        uint8 decoded;\\n        for (uint256 i = 0; i < len; i++) {\\n            bytes1 char = self[off + i];\\n            require(char >= 0x30 && char <= 0x7A);\\n            decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n            require(decoded <= 0x20);\\n            if (i == len - 1) {\\n                break;\\n            }\\n            ret = (ret << 5) | decoded;\\n        }\\n\\n        uint256 bitlen = len * 5;\\n        if (len % 8 == 0) {\\n            // Multiple of 8 characters, no padding\\n            ret = (ret << 5) | decoded;\\n        } else if (len % 8 == 2) {\\n            // Two extra characters - 1 byte\\n            ret = (ret << 3) | (decoded >> 2);\\n            bitlen -= 2;\\n        } else if (len % 8 == 4) {\\n            // Four extra characters - 2 bytes\\n            ret = (ret << 1) | (decoded >> 4);\\n            bitlen -= 4;\\n        } else if (len % 8 == 5) {\\n            // Five extra characters - 3 bytes\\n            ret = (ret << 4) | (decoded >> 1);\\n            bitlen -= 1;\\n        } else if (len % 8 == 7) {\\n            // Seven extra characters - 4 bytes\\n            ret = (ret << 2) | (decoded >> 3);\\n            bitlen -= 3;\\n        } else {\\n            revert();\\n        }\\n\\n        return bytes32(ret << (256 - bitlen));\\n    }\\n\\n    /**\\n     * @dev Finds the first occurrence of the byte `needle` in `self`.\\n     * @param self The string to search\\n     * @param off The offset to start searching at\\n     * @param len The number of bytes to search\\n     * @param needle The byte to search for\\n     * @return The offset of `needle` in `self`, or 2**256-1 if it was not found.\\n     */\\n    function find(\\n        bytes memory self,\\n        uint256 off,\\n        uint256 len,\\n        bytes1 needle\\n    ) internal pure returns (uint256) {\\n        for (uint256 idx = off; idx < off + len; idx++) {\\n            if (self[idx] == needle) {\\n                return idx;\\n            }\\n        }\\n        return type(uint256).max;\\n    }\\n}\\n\",\"keccak256\":\"0x4f10902639b85a17ae10745264feff322e793bfb1bc130a9a90efa7dda47c6cc\"},\"@ensdomains/ens-contracts/contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true if the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x15f7b1dfa7cd34444daf79ec9b4d40437caa9257893ce0639d706fcc2ba69e52\"},\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x411447c1e90c51e09702815a85ec725ffbbe37cf96e8cc4d2a8bd4ad8a59d73e\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xd95cd77684ba5752c428d7dceb4ecc6506ac94f4fbb910489637eb68dcd8e366\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n    function resolve(\\n        bytes memory name,\\n        bytes memory data\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5d81521cfae7d9a4475d27533cd8ed0d3475d369eb0674fd90ffbdbdf292faa3\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key,\\n        string value\\n    );\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7c5debb3c42cd9f5de2274ea7aa053f238608314b62db441c40e31cea2543fd5\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(uint256) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb3f1cf6df01ed7b15e5f2318f6823afbdb586ca38c2124c67955c645647ae9a2\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/INameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"../ethregistrar/IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IMetadataService.sol\\\";\\nimport \\\"./INameWrapperUpgrade.sol\\\";\\n\\nuint32 constant CANNOT_UNWRAP = 1;\\nuint32 constant CANNOT_BURN_FUSES = 2;\\nuint32 constant CANNOT_TRANSFER = 4;\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\nuint32 constant CANNOT_SET_TTL = 16;\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\nuint32 constant CANNOT_APPROVE = 64;\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\nuint32 constant IS_DOT_ETH = 1 << 17;\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\nuint32 constant CAN_DO_EVERYTHING = 0;\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\n// all fuses apart from IS_DOT_ETH\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\n\\ninterface INameWrapper is IERC1155 {\\n    event NameWrapped(\\n        bytes32 indexed node,\\n        bytes name,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    );\\n\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\n\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\n\\n    function ens() external view returns (ENS);\\n\\n    function registrar() external view returns (IBaseRegistrar);\\n\\n    function metadataService() external view returns (IMetadataService);\\n\\n    function names(bytes32) external view returns (bytes memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\n\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    function wrap(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        address resolver\\n    ) external;\\n\\n    function wrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint16 ownerControlledFuses,\\n        address resolver\\n    ) external returns (uint64 expires);\\n\\n    function registerAndWrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint256 duration,\\n        address resolver,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint256 registrarExpiry);\\n\\n    function renew(\\n        uint256 labelHash,\\n        uint256 duration\\n    ) external returns (uint256 expires);\\n\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\n\\n    function unwrapETH2LD(\\n        bytes32 label,\\n        address newRegistrant,\\n        address newController\\n    ) external;\\n\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint32 newFuses);\\n\\n    function setChildFuses(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        string calldata label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        string calldata label,\\n        address newOwner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function extendExpiry(\\n        bytes32 node,\\n        bytes32 labelhash,\\n        uint64 expiry\\n    ) external returns (uint64);\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) external view returns (bool);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function ownerOf(uint256 id) external view returns (address owner);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getData(\\n        uint256 id\\n    ) external view returns (address, uint32, uint64);\\n\\n    function setMetadataService(IMetadataService _metadataService) external;\\n\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\n\\n    function allFusesBurned(\\n        bytes32 node,\\n        uint32 fuseMask\\n    ) external view returns (bool);\\n\\n    function isWrapped(bytes32) external view returns (bool);\\n\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x70310eb67146d7290731c31841399640ac3b6a949eadc6598bc150123d185c57\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        address approved,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\",\"license\":\"MIT\"},\"@ensdomains/evm-verifier/contracts/EVMFetchTarget.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IEVMVerifier } from './IEVMVerifier.sol';\\nimport { Address } from '@openzeppelin/contracts/utils/Address.sol';\\n\\n/**\\n * @dev Callback implementation for users of `EVMFetcher`. If you use `EVMFetcher`, your contract must\\n *      inherit from this contract in order to handle callbacks correctly.\\n */\\nabstract contract EVMFetchTarget {\\n    using Address for address;\\n\\n    error ResponseLengthMismatch(uint256 actual, uint256 expected);\\n\\n    /**\\n     * @dev Internal callback function invoked by CCIP-Read in response to a `getStorageSlots` request.\\n     */\\n    function getStorageSlotsCallback(bytes calldata response, bytes calldata extradata) external {\\n        bytes memory proof = abi.decode(response, (bytes));\\n        (IEVMVerifier verifier, address addr, bytes32[] memory commands, bytes[] memory constants, bytes4 callback, bytes memory callbackData) =\\n            abi.decode(extradata, (IEVMVerifier, address, bytes32[], bytes[], bytes4, bytes));\\n        bytes[] memory values = verifier.getStorageValues(addr, commands, constants, proof);\\n        if(values.length != commands.length) {\\n            revert ResponseLengthMismatch(values.length, commands.length);\\n        }\\n        bytes memory ret = address(this).functionCall(abi.encodeWithSelector(callback, values, callbackData));\\n        assembly {\\n            return(add(ret, 32), mload(ret))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4653f974a897ce78b7bc3779ba0bb7767df99add49de4f0e9089399f47bb5942\",\"license\":\"MIT\"},\"@ensdomains/evm-verifier/contracts/EVMFetcher.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IEVMVerifier } from './IEVMVerifier.sol';\\nimport { EVMFetchTarget } from './EVMFetchTarget.sol';\\nimport { Address } from '@openzeppelin/contracts/utils/Address.sol';\\n\\ninterface IEVMGateway {\\n    function getStorageSlots(address addr, bytes32[] memory commands, bytes[] memory constants) external pure returns(bytes memory witness);\\n}\\n\\nuint8 constant FLAG_DYNAMIC = 0x01;\\nuint8 constant OP_CONSTANT = 0x00;\\nuint8 constant OP_BACKREF = 0x20;\\nuint8 constant OP_END = 0xff;\\n\\n/**\\n * @dev A library to facilitate requesting storage data proofs from contracts, possibly on a different chain.\\n *      See l1-verifier/test/TestL1.sol for example usage.\\n */\\nlibrary EVMFetcher {\\n    uint256 constant MAX_COMMANDS = 32;\\n    uint256 constant MAX_CONSTANTS = 32; // Must not be greater than 32\\n\\n    using Address for address;\\n\\n    error TooManyCommands(uint256 max);\\n    error CommandTooLong();\\n    error InvalidReference(uint256 value, uint256 max);\\n    error OffchainLookup(address sender, string[] urls, bytes callData, bytes4 callbackFunction, bytes extraData);\\n\\n    struct EVMFetchRequest {\\n        IEVMVerifier verifier;\\n        address target;\\n        bytes32[] commands;\\n        uint256 operationIdx;\\n        bytes[] constants;\\n    }\\n\\n    /**\\n     * @dev Creates a request to fetch the value of multiple storage slots from a contract via CCIP-Read, possibly from\\n     *      another chain.\\n     *      Supports dynamic length values and slot numbers derived from other retrieved values.\\n     * @param verifier An instance of a verifier contract that can provide and verify the storage slot information.\\n     * @param target The address of the contract to fetch storage proofs for.\\n     */\\n    function newFetchRequest(IEVMVerifier verifier, address target) internal pure returns (EVMFetchRequest memory) {\\n        bytes32[] memory commands = new bytes32[](MAX_COMMANDS);\\n        bytes[] memory constants = new bytes[](MAX_CONSTANTS);\\n        assembly {\\n            mstore(commands, 0) // Set current array length to 0\\n            mstore(constants, 0)\\n        }        \\n        return EVMFetchRequest(verifier, target, commands, 0, constants);\\n    }\\n\\n    /**\\n     * @dev Starts describing a new fetch request.\\n     *      Paths specify a series of hashing operations to derive the final slot ID.\\n     *      See https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html for details on how Solidity\\n     *      lays out storage variables.\\n     * @param request The request object being operated on.\\n     * @param baseSlot The base slot ID that forms the root of the path.\\n     */\\n    function getStatic(EVMFetchRequest memory request, uint256 baseSlot) internal pure returns (EVMFetchRequest memory) {\\n        bytes32[] memory commands = request.commands;\\n        uint256 commandIdx = commands.length;\\n        if(commandIdx > 0 && request.operationIdx < 32) {\\n            // Terminate previous command\\n            _addOperation(request, OP_END);\\n        }\\n        assembly {\\n            mstore(commands, add(commandIdx, 1)) // Increment command array length\\n        }\\n        if(request.commands.length > MAX_COMMANDS) {\\n            revert TooManyCommands(MAX_COMMANDS);\\n        }\\n        request.operationIdx = 0;\\n        _addOperation(request, 0);\\n        _addOperation(request, _addConstant(request, abi.encode(baseSlot)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Starts describing a new fetch request.\\n     *      Paths specify a series of hashing operations to derive the final slot ID.\\n     *      See https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html for details on how Solidity\\n     *      lays out storage variables.\\n     * @param request The request object being operated on.\\n     * @param baseSlot The base slot ID that forms the root of the path.\\n     */\\n    function getDynamic(EVMFetchRequest memory request, uint256 baseSlot) internal pure returns (EVMFetchRequest memory) {\\n        bytes32[] memory commands = request.commands;\\n        uint256 commandIdx = commands.length;\\n        if(commandIdx > 0 && request.operationIdx < 32) {\\n            // Terminate previous command\\n            _addOperation(request, OP_END);\\n        }\\n        assembly {\\n            mstore(commands, add(commandIdx, 1)) // Increment command array length\\n        }\\n        if(request.commands.length > MAX_COMMANDS) {\\n            revert TooManyCommands(MAX_COMMANDS);\\n        }\\n        request.operationIdx = 0;\\n        _addOperation(request, FLAG_DYNAMIC);\\n        _addOperation(request, _addConstant(request, abi.encode(baseSlot)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a `uint256` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(EVMFetchRequest memory request, uint256 el) internal pure returns (EVMFetchRequest memory) {\\n        if(request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, abi.encode(el)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a `bytes32` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(EVMFetchRequest memory request, bytes32 el) internal pure returns (EVMFetchRequest memory) {\\n        if(request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, abi.encode(el)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds an `address` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(EVMFetchRequest memory request, address el) internal pure returns (EVMFetchRequest memory) {\\n        if(request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, abi.encode(el)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a `bytes` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(EVMFetchRequest memory request, bytes memory el) internal pure returns (EVMFetchRequest memory) {\\n        if(request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, el));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a `string` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(EVMFetchRequest memory request, string memory el) internal pure returns (EVMFetchRequest memory) {\\n        if(request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, bytes(el)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a reference to a previous fetch to the current path.\\n     * @param request The request object being operated on.\\n     * @param idx The index of the previous fetch request, starting at 0.\\n     */\\n    function ref(EVMFetchRequest memory request, uint8 idx) internal pure returns (EVMFetchRequest memory) {\\n        if(request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        if(idx > request.commands.length || idx > 31) {\\n            revert InvalidReference(idx, request.commands.length);\\n        }\\n        _addOperation(request, OP_BACKREF | idx);\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Initiates the fetch request.\\n     *      Calling this function terminates execution; clients that implement CCIP-Read will make a callback to\\n     *      `callback` with the results of the operation.\\n     * @param callbackId A callback function selector on this contract that will be invoked via CCIP-Read with the result of the lookup.\\n     *        The function must have a signature matching `(bytes[] memory values, bytes callbackData)` with a return type matching the call in which\\n     *        this function was invoked. Its return data will be returned as the return value of the entire CCIP-read operation.\\n     * @param callbackData Extra data to supply to the callback.\\n     */\\n    function fetch(EVMFetchRequest memory request, bytes4 callbackId, bytes memory callbackData) internal view {\\n        if(request.commands.length > 0 && request.operationIdx < 32) {\\n            // Terminate last command\\n            _addOperation(request, OP_END);\\n        }\\n        revert OffchainLookup(\\n            address(this),\\n            request.verifier.gatewayURLs(),\\n            abi.encodeCall(IEVMGateway.getStorageSlots, (request.target, request.commands, request.constants)),\\n            EVMFetchTarget.getStorageSlotsCallback.selector,\\n            abi.encode(request.verifier, request.target, request.commands, request.constants, callbackId, callbackData)\\n        );\\n    }\\n\\n    function _addConstant(EVMFetchRequest memory request, bytes memory value) private pure returns(uint8 idx) {\\n        bytes[] memory constants = request.constants;\\n        idx = uint8(constants.length);\\n        assembly {\\n            mstore(constants, add(idx, 1)) // Increment constant array length\\n        }\\n        constants[idx] = value;\\n    }\\n\\n    function _addOperation(EVMFetchRequest memory request, uint8 op) private pure {\\n        uint256 commandIdx = request.commands.length - 1;\\n        request.commands[commandIdx] = request.commands[commandIdx] | (bytes32(bytes1(op)) >> (8 * request.operationIdx++));\\n    }\\n}\\n\",\"keccak256\":\"0x5a6a955ebf3e6da9ce8d39e2729c35e4e800426025954a9a9777c209447ff8b4\",\"license\":\"MIT\"},\"@ensdomains/evm-verifier/contracts/IEVMVerifier.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IEVMVerifier {\\n    function gatewayURLs() external view returns(string[] memory);\\n    function getStorageValues(address target, bytes32[] memory commands, bytes[] memory constants, bytes memory proof) external view returns(bytes[] memory values);\\n}\\n\",\"keccak256\":\"0x30a635309aeebbde83774010eea5e975b8e73d1932140457121eefdce7792d72\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/IMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IMetadataResolver {\\n    /*\\n     * @notice Get metadata about the CCIP Resolver ENSIP 16 https://docs.ens.domains/ens-improvement-proposals/ensip-16-offchain-metadata\\n     * @dev This function provides metadata about the CCIP Resolver, including its name, coin type, GraphQL URL, storage type, and encoded information.\\n     * @param name The domain name in format (dnsEncoded)\\n     * @return coinType The cointype of the chain the target contract locates such as Optimism, Base, Arb, etc\\n     * @return graphqlUrl The GraphQL URL used by the resolver\\n     * @return storageType 0 = EVM, 1 = Non blockchain, 2 = Starknet\\n     * @return storageLocation The storage identifier. For EVM chains, this is the address of the resolver contract.\\n     * @return context. An identifier used by l2 graph indexer for Domain schema id (`context-namehash`) allowing multiple resolver contracts to have own namespace.\\n     *\\n     */\\n    function metadata(bytes calldata name) external view returns (\\n        uint256 coinType,\\n        string memory graphqlUrl,\\n        uint8 storageType,\\n        bytes memory storageLocation,\\n        bytes memory context\\n    );\\n\\n    event MetadataChanged(\\n        bytes name,\\n        uint256 coinType,\\n        string graphqlUrl,\\n        uint8 storageType,\\n        bytes storageLocation,\\n        bytes context\\n    );\\n}\",\"keccak256\":\"0xf3af5325514001ff150399986839a1402c4aef5f332f8639a5756bb9dbcd5b05\",\"license\":\"MIT\"},\"contracts/ITargetResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface ITargetResolver{\\n    function getTarget(\\n        bytes memory name\\n    ) external view returns (bytes32 node, address target);\\n}\\n\",\"keccak256\":\"0x309bfb692d77b29eb9bfeccc55f0fc7cebdade75adb299d7e1afe1f007be0a11\",\"license\":\"MIT\"},\"contracts/L1Resolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {EVMFetcher} from '@ensdomains/evm-verifier/contracts/EVMFetcher.sol';\\nimport {EVMFetchTarget} from '@ensdomains/evm-verifier/contracts/EVMFetchTarget.sol';\\nimport {IEVMVerifier} from '@ensdomains/evm-verifier/contracts/IEVMVerifier.sol';\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\nimport {INameWrapper} from \\\"@ensdomains/ens-contracts/contracts/wrapper/INameWrapper.sol\\\";\\nimport {BytesUtils} from \\\"@ensdomains/ens-contracts/contracts/dnssec-oracle/BytesUtils.sol\\\";\\nimport {IAddrResolver} from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\\\";\\nimport {IAddressResolver} from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\\\";\\nimport {ITextResolver} from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol\\\";\\nimport {IContentHashResolver} from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol\\\";\\nimport {ITargetResolver} from './ITargetResolver.sol';\\nimport {IMetadataResolver} from './IMetadataResolver.sol';\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\ncontract L1Resolver is EVMFetchTarget, ITargetResolver, IMetadataResolver, IExtendedResolver, ERC165 {\\n    using EVMFetcher for EVMFetcher.EVMFetchRequest;\\n    using BytesUtils for bytes;\\n    IEVMVerifier public immutable verifier;\\n    ENS public immutable ens;\\n    INameWrapper public immutable nameWrapper;\\n    mapping(bytes32 => address) targets;\\n    uint256 constant COIN_TYPE_ETH = 60;\\n    uint256 constant RECORD_VERSIONS_SLOT = 0;\\n    uint256 constant VERSIONABLE_ADDRESSES_SLOT = 2;\\n    uint256 constant VERSIONABLE_HASHES_SLOT = 3;\\n    uint256 constant VERSIONABLE_TEXTS_SLOT = 10;\\n    string  public   graphqlUrl;\\n    uint256 public   l2ResolverCoinType;\\n\\n    event TargetSet(bytes name, address target);\\n    function isAuthorised(bytes32 node) internal view returns (bool) {\\n        // TODO: Add support for\\n        // trustedETHController\\n        // trustedReverseRegistrar\\n        // isApprovedForAll\\n        // isApprovedFor\\n        address owner = ens.owner(node);\\n        if (owner == address(nameWrapper)) {\\n          owner = nameWrapper.ownerOf(uint256(node));\\n        }\\n        return owner == msg.sender;\\n    }\\n\\n    /**\\n     * @param _verifier     The chain verifier address\\n     * @param _ens          The ENS registry address\\n     * @param _nameWrapper  The ENS name wrapper address\\n     * @param _graphqlUrl   The offchain/l2 graphql endpoint url\\n     * @param _l2ResolverCoinType The chainId at which the resolver resolves data from. 0 if storageLocation is offChain\\n     */\\n    constructor(\\n      IEVMVerifier _verifier,\\n      ENS _ens,\\n      INameWrapper _nameWrapper,\\n      string memory _graphqlUrl,\\n      uint256 _l2ResolverCoinType\\n    ){\\n      require(address(_nameWrapper) != address(0), \\\"Name Wrapper address must be set\\\");\\n      require(address(_verifier) != address(0), \\\"Verifier address must be set\\\");\\n      require(address(_ens)  != address(0), \\\"Registry address must be set\\\");\\n      verifier = _verifier;\\n      ens = _ens;\\n      nameWrapper = _nameWrapper;\\n      graphqlUrl = _graphqlUrl;\\n      l2ResolverCoinType = _l2ResolverCoinType;\\n    }\\n\\n    /**\\n     * Set target address to verify aagainst\\n     * @param name The encoded name to query.\\n     * @param target The L2 resolver address to verify against.\\n     */\\n    function setTarget(bytes calldata name, address target) public {\\n      (bytes32 node,) = getTarget(name);\\n      require(isAuthorised(node));\\n      targets[node] = target;\\n      emit TargetSet(name, target);\\n      (\\n        ,,\\n        uint8 storageType,\\n        bytes memory storageLocation,\\n        bytes memory context\\n      ) = metadata(name);\\n      emit MetadataChanged(\\n        name,\\n        l2ResolverCoinType,\\n        graphqlUrl,\\n        storageType,\\n        storageLocation,\\n        context\\n      );\\n    }\\n\\n    /**\\n     * @dev Returns the L2 target address that can answer queries for `name`.\\n     * @param name DNS encoded ENS name to query\\n     * @return node The node of the name\\n     * @return target The L2 resolver address to verify against.\\n     */\\n    function getTarget(\\n        bytes memory name\\n    ) public view returns (bytes32 node, address target) {\\n        return _getTarget(name, 0);\\n    }\\n\\n    function _getTarget(\\n        bytes memory name,\\n        uint256 offset\\n    ) private view returns (bytes32 node, address target) {\\n        uint256 len = name.readUint8(offset);\\n        node = bytes32(0);\\n        if (len > 0) {\\n            bytes32 label = name.keccak(offset + 1, len);\\n            (node, target) = _getTarget(\\n                name,\\n                offset + len + 1\\n            );\\n            node = keccak256(abi.encodePacked(node, label));\\n            if(targets[node] != address(0)){\\n                return (\\n                    node,\\n                    targets[node]\\n                );\\n            }\\n        } else {\\n            return (\\n                bytes32(0),\\n                address(0)\\n            );\\n        }\\n        return (node, target);\\n    }\\n\\n    /** \\n     * @dev Resolve and verify a record stored in l2 target address. It supports subname by fetching target recursively to the nearlest parent.\\n     * @param name DNS encoded ENS name to query\\n     * @param data The actual calldata\\n     * @return result result of the call\\n     */\\n    function resolve(bytes calldata name, bytes calldata data) external view returns (bytes memory result) {\\n        (, address target) = _getTarget(name, 0);\\n        bytes4 selector = bytes4(data);\\n\\n        if (selector == IAddrResolver.addr.selector) {\\n            (bytes32 node) = abi.decode(data[4:], (bytes32));\\n            return _addr(node, target);\\n        }\\n        if (selector == IAddressResolver.addr.selector) {\\n            (bytes32 node, uint256 cointype) = abi.decode(data[4:], (bytes32, uint256));\\n            return _addr(node, cointype, target);\\n        }\\n        if (selector == ITextResolver.text.selector) {\\n            (bytes32 node, string memory key) = abi.decode(data[4:], (bytes32, string));\\n            return bytes(_text(node, key, target));\\n        }\\n        if (selector == IContentHashResolver.contenthash.selector) {\\n            (bytes32 node) = abi.decode(data[4:], (bytes32));\\n            return _contenthash(node, target);\\n        }\\n    }\\n\\n    function _addr(bytes32 node, address target) private view returns (bytes memory) {\\n        EVMFetcher.newFetchRequest(verifier, target)\\n            .getStatic(RECORD_VERSIONS_SLOT)\\n              .element(node)\\n            .getDynamic(VERSIONABLE_ADDRESSES_SLOT)\\n              .ref(0)\\n              .element(node)\\n              .element(COIN_TYPE_ETH)\\n            .fetch(this.addrCallback.selector, ''); // recordVersions\\n    }\\n\\n    function addrCallback(\\n        bytes[] memory values,\\n        bytes memory\\n    ) public pure returns (bytes memory) {\\n        return abi.encode(address(bytes20(values[1])));\\n    }\\n\\n    function _addr(\\n        bytes32 node,\\n        uint256 coinType,\\n        address target\\n    ) private view returns (bytes memory) {\\n        EVMFetcher.newFetchRequest(verifier, target)\\n            .getStatic(RECORD_VERSIONS_SLOT)\\n              .element(node)\\n            .getDynamic(VERSIONABLE_ADDRESSES_SLOT)\\n              .ref(0)\\n              .element(node)\\n              .element(coinType)\\n            .fetch(this.addrCoinTypeCallback.selector, '');\\n    }\\n\\n    function addrCoinTypeCallback(\\n        bytes[] memory values,\\n        bytes memory\\n    ) public pure returns (bytes memory) {\\n        return abi.encode(values[1]);\\n    }\\n\\n    function _text(\\n        bytes32 node,\\n        string memory key,\\n        address target\\n    ) private view returns (bytes memory) {\\n        EVMFetcher.newFetchRequest(verifier, target)\\n            .getStatic(RECORD_VERSIONS_SLOT)\\n              .element(node)\\n            .getDynamic(VERSIONABLE_TEXTS_SLOT)\\n              .ref(0)\\n              .element(node)\\n              .element(key)\\n            .fetch(this.textCallback.selector, '');\\n    }\\n\\n    function textCallback(\\n        bytes[] memory values,\\n        bytes memory\\n    ) public pure returns (bytes memory) {\\n        return abi.encode(string(values[1]));\\n    }\\n\\n    function _contenthash(bytes32 node, address target) private view returns (bytes memory) {\\n        EVMFetcher.newFetchRequest(verifier, target)\\n            .getStatic(RECORD_VERSIONS_SLOT)\\n              .element(node)\\n            .getDynamic(VERSIONABLE_HASHES_SLOT)\\n              .ref(0)\\n              .element(node)\\n            .fetch(this.contenthashCallback.selector, '');\\n    }\\n\\n    function contenthashCallback(\\n        bytes[] memory values,\\n        bytes memory\\n    ) public pure returns (bytes memory) {\\n        return abi.encode(values[1]);\\n    }\\n\\n    /**\\n     * @notice Get metadata about the L1 Resolver\\n     * @dev This function provides metadata about the L1 Resolver, including its name, coin type, GraphQL URL, storage type, and encoded information.\\n     * @param name The domain name in format (dnsEncoded)\\n     * @return coinType The cointype of the chain the target contract locates such as Optimism, Base, Arb, etc\\n     * @return graphqlUrl The GraphQL URL used by the resolver\\n     * @return storageType Storage Type (0 for EVM)\\n     * @return storageLocation The storage identifier. For EVM chains, this is the address of the resolver contract.\\n     * @return context. An identifier used by l2 graph indexer for Domain schema id (`context-namehash`) allowing multiple resolver contracts to have own namespace.\\n     */\\n    function metadata(\\n        bytes calldata name\\n    ) public view returns (uint256, string memory, uint8, bytes memory, bytes memory) {\\n        (, address target) = getTarget(name);\\n\\n        return (\\n            l2ResolverCoinType,\\n            graphqlUrl,\\n            uint8(0), // storage Type 0 => EVM\\n            abi.encodePacked(address(target)), // storage location => l2 resolver address\\n            abi.encodePacked(address(target))  // context => l2 resolver address\\n        );\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public override view returns (bool) {\\n        return\\n            interfaceId == type(IExtendedResolver).interfaceId ||\\n            interfaceId == type(ITargetResolver).interfaceId ||\\n            interfaceId == type(IMetadataResolver).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xf20f2a39c87e0bcdd6c59552a73f012b420115d7a7a589241b899dfe94520cf9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806301ffc9a7146100fd57806315f64386146100f85780632b7ac3f3146100f357806338bf92e6146100c15780633f15457f146100ee5780634062b43f146100e95780635bdaa916146100e45780637e6215ba146100df5780638a596ebe146100da5780639061b923146100d5578063a8e5fbc0146100d0578063d358df77146100cb578063de9abe5e146100c1578063f470901a146100c65763fcd2e381146100c157600080fd5b610544565b610da4565b610ae1565b610a8c565b610942565b6108bc565b61089e565b610771565b6106cd565b6105ac565b610384565b610330565b61011c565b35906001600160e01b03198216820361011757565b600080fd5b34610117576020366003190112610117576004356001600160e01b0319811680910361011757807f9061b92300000000000000000000000000000000000000000000000000000000602092149081156101dd575b81156101b3575b8115610189575b506040519015158152f35b7f01ffc9a7000000000000000000000000000000000000000000000000000000009150143861017e565b7f8a596ebe0000000000000000000000000000000000000000000000000000000081149150610177565b7f15f643860000000000000000000000000000000000000000000000000000000081149150610170565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761023957604052565b610207565b6020810190811067ffffffffffffffff82111761023957604052565b610420810190811067ffffffffffffffff82111761023957604052565b90601f8019910116810190811067ffffffffffffffff82111761023957604052565b67ffffffffffffffff811161023957601f01601f191660200190565b9291926102c182610299565b916102cf6040519384610277565b829481845281830111610117578281602093846000960137010152565b9080601f8301121561011757816020610307933591016102b5565b90565b9060208282031261011757813567ffffffffffffffff81116101175761030792016102ec565b346101175760203660031901126101175760043567ffffffffffffffff8111610117576001600160a01b03610375600061037060409436906004016102ec565b611398565b83519182529091166020820152f35b346101175760003660031901126101175760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b67ffffffffffffffff81116102395760051b60200190565b9080601f83011215610117578135906103f8826103c8565b926104066040519485610277565b828452602092838086019160051b8301019280841161011757848301915b8483106104345750505050505090565b823567ffffffffffffffff8111610117578691610456848480948901016102ec565b815201920191610424565b9060406003198301126101175767ffffffffffffffff600435818111610117578361048e916004016103e0565b9260243591821161011757610307916004016102ec565b60005b8381106104b85750506000910152565b81810151838201526020016104a8565b906020916104e1815180928185528580860191016104a5565b601f01601f1916010190565b90602091828152606051808483015260005b818110610520575060409293506000838284010152601f8019910116010190565b60808101518382016040015284016104ff565b9060206103079281815201906104c8565b346101175761055236610461565b508051600110156105a75761058161058f60406105a393015160405192839160208084015260408301906104c8565b03601f198101835282610277565b6040519182916020835260208301906104c8565b0390f35b61147a565b346101175760003660031901126101175760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b90600182811c92168015610620575b602083101461060a57565b634e487b7160e01b600052602260045260246000fd5b91607f16916105ff565b9060009160019081549161063d836105f0565b808352928181169081156106b0575060011461065857505050565b80929394506000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6916000925b84841061069857505060209250010190565b80546020858501810191909152909301928101610686565b915050602093945060ff929192191683830152151560051b010190565b34610117576000366003190112610117576105a360405161058f816106f18161062a565b0382610277565b9181601f840112156101175782359167ffffffffffffffff8311610117576020838186019501011161011757565b60406003198201126101175767ffffffffffffffff916004358381116101175782610753916004016106f8565b939093926024359182116101175761076d916004016106f8565b9091565b34610117576107966107e8600061079f61078a36610726565b9691839193019061030a565b94810190610e2c565b95936040989395929198518098819582947f3baa6d50000000000000000000000000000000000000000000000000000000008452896001600160a01b0380961660048601611075565b0392165afa92831561089957600093610876575b5082519051908181036108375761082f8461082987610581876040519485936020850152602484016110c6565b306110eb565b602081519101f35b6040517f2918942500000000000000000000000000000000000000000000000000000000815260048101919091526024810191909152604490fd5b0390fd5b61089291933d8091833e61088a8183610277565b810190610f3b565b91386107fc565b6110ba565b34610117576000366003190112610117576020600254604051908152f35b346101175760203660031901126101175760043567ffffffffffffffff8111610117576109346108fc6108f66105a39336906004016106f8565b906123e7565b92959394919060ff610920604051988998895260a060208a015260a08901906104c8565b9216604087015285820360608701526104c8565b9083820360808501526104c8565b3461011757610370600061096461095836610726565b949290959136916102b5565b9290506001600160e01b031961097a8383611490565b167f3b3b57de000000000000000000000000000000000000000000000000000000008114610a78577ff1cb7e06000000000000000000000000000000000000000000000000000000008114610a5b577f59d1d43c000000000000000000000000000000000000000000000000000000008114610a3e577fbc1c58d10000000000000000000000000000000000000000000000000000000014610a2357604051806105a3816104ed565b81610a3992610a31926114bc565b8101906114d9565b612321565b5081610a5592610a4d926114bc565b8101906114fe565b9061223a565b5081610a7292610a6a926114bc565b8101906114e8565b906120db565b5081610a8792610a31926114bc565b61153e565b346101175760003660031901126101175760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b6001600160a01b0381160361011757565b346101175760403660031901126101175760043567ffffffffffffffff811161011757610b129036906004016106f8565b60243591610b1f83610ad0565b610b2f60006103703685856102b5565b506040517f02571be3000000000000000000000000000000000000000000000000000000008152600481018290526001600160a01b03602080836024817f000000000000000000000000000000000000000000000000000000000000000086165afa92831561089957600093610d83575b507f00000000000000000000000000000000000000000000000000000000000000008216908383168214610ca6575b505094610c7081610c3d7f88781081cc340609705af0f96bf3ba64ea267873444e91725bd072f2af0f44d895610c2d610c7e967f9fcbe230acca8f6bcfd2dda7aa896aa97299a423bdac7c8b565819624436a0729b339116146111f6565b6000526000602052604060002090565b906001600160a01b03167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b60405191829186868461121e565b0390a1610ca1610c8e83836123e7565b9350915060025460405196879687611246565b0390a1005b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018690529790935091908390889060249082905afa801561089957610c3d7f88781081cc340609705af0f96bf3ba64ea267873444e91725bd072f2af0f44d895610c2d610c709486947f9fcbe230acca8f6bcfd2dda7aa896aa97299a423bdac7c8b565819624436a0729c610c7e99600092610d56575b50509750959a5050955050610bcf565b610d759250803d10610d7c575b610d6d8183610277565b81019061134d565b3880610d46565b503d610d63565b819350610d9d9083923d8611610d7c57610d6d8183610277565b9290610ba0565b3461011757610db236610461565b508051600110156105a757610581610e0b60406105a393015160208151910151906bffffffffffffffffffffffff19918281169160148110610e17575b50506040805160609290921c6020830152909384925090820190565b60405191829182610533565b8391925060140360031b1b1616803880610def565b91909160c081840312610117578035610e4481610ad0565b92602080830135610e5481610ad0565b9367ffffffffffffffff9160408501358381116101175785019084601f8301121561011757813591610e85836103c8565b92610e936040519485610277565b808452828085019160051b83010191878311610117578301905b828210610ef557505050509360608101358381116101175784610ed19183016103e0565b93610ede60808301610102565b9360a08301359081116101175761030792016102ec565b81358152908301908301610ead565b90929192610f1181610299565b91610f1f6040519384610277565b829482845282820111610117576020610f399301906104a5565b565b90602090818382031261011757825167ffffffffffffffff9384821161011757019080601f83011215610117578151610f73816103c8565b94604090610f8382519788610277565b828752858088019360051b8601019484861161011757868101935b868510610fb057505050505050505090565b845183811161011757820186603f82011215610117578891610fda88838886809601519101610f04565b815201940193610f9e565b90815180825260208080930193019160005b828110611005575050505090565b835185529381019392810192600101610ff7565b908082519081815260208091019281808460051b8301019501936000915b8483106110475750505050505090565b9091929394958480611065600193601f198682030187528a516104c8565b9801930193019194939290611037565b9261109e61030795936001600160a01b036110ac94168652608060208701526080860190610fe5565b908482036040860152611019565b9160608184039101526104c8565b6040513d6000823e3d90fd5b90916110dd61030793604084526040840190611019565b9160208184039101526104c8565b9061030791600080604051936111008561021d565b601e85527f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000602086015260208151910182855af13d15611162573d9161114583610299565b926111536040519485610277565b83523d6000602085013e611166565b6060915b919290156111c7575081511561117a575090565b3b156111835790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156111da5750805190602001fd5b6108729060405191829162461bcd60e51b835260048301610533565b1561011757565b908060209392818452848401376000828201840152601f01601f1916010190565b9161123f6020926001600160a01b03929695966040865260408601916111fd565b9416910152565b94919061125f919796949760c0875260c08701916111fd565b91602090818601528483036040860152600092600190815491611281836105f0565b8083529281811690811561132b57506001146112c9575b50505050906112bb9160ff610307969716606086015284820360808601526104c8565b9160a08184039101526104c8565b6000818152939995509091907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b828510611318575094989190920101925081905060ff6112bb610307611298565b80548486018c0152938a019381016112f7565b60ff191683860152505090151560051b010191508060ff6112bb610307611298565b90816020910312610117575161030781610ad0565b634e487b7160e01b600052601160045260246000fd5b906001820180921161138657565b611362565b9190820180921161138657565b91909180518310156105a7576020838201015160f81c801561145457906113dd6113d8836113d26113e3956113cc89611378565b86611460565b9661138b565b611378565b90611398565b604080516020810193845290810194909452926114038160608101610581565b5190206001600160a01b03611432611425836000526000602052604060002090565b546001600160a01b031690565b1661143b579190565b9150610307611425836000526000602052604060002090565b50509050600090600090565b908281018082116113865782511061011757016020012090565b634e487b7160e01b600052603260045260246000fd5b6001600160e01b031990358181169392600481106114ad57505050565b60040360031b82901b16169150565b909291928360041161011757831161011757600401916003190190565b90816020910312610117573590565b9190826040910312610117576020823592013590565b91906040838203126101175782359260208101359067ffffffffffffffff821161011757019080601f8301121561011757816020610307933591016102b5565b61158f9061158061158a6115858361158061157b6060987f0000000000000000000000000000000000000000000000000000000000000000611781565b61181f565b61193f565b6118c8565b611973565b90611598611743565b508101906020908183511015611719576004906040906115d46115ce8351603c878201528681526115c88161021d565b83611ef7565b8261205f565b8151936115e08561023e565b6000855282820195818751511515918261170e575b5050611700575b600061161e61161284516001600160a01b031690565b6001600160a01b031690565b845195868092632d43cbef60e21b82525afa938415610899576000946116e5575b5081810180516001600160a01b031695875160808501908151988751998a9287840163ea9cd3bf60e01b9052602484019261167993611a01565b0394601f19958681018a5261168e908a610277565b516001600160a01b031692516001600160a01b031698519051908651998a958601946116b995611a35565b0390810185526116c99085610277565b51630556f18360e41b8152928392610872923060048601611bdf565b6116f991943d8091833e61088a8183610277565b923861163f565b61170982611f24565b6115fc565b5110905081386115f5565b60046040517fb00fd638000000000000000000000000000000000000000000000000000000008152fd5b6040519060a0820182811067ffffffffffffffff82111761023957604052606060808360008152600060208201528260408201526000838201520152565b9061178a611743565b506040516117978161025a565b60209283825261040092833686850137604051936117b48561025a565b8560005b82811061180f5750505060008352600084526040519460a0860186811067ffffffffffffffff821117610239576040526001600160a01b039283168652911690840152604083015260006060830152608082015290565b60608282890101520186906117b8565b611827611743565b50602060408201805160018151801515806118bb575b6118ad575b01905251511161187b576000606082015261185c81611f9d565b6103076115ce6040516115c88161058160208201906000602083019252565b6040517f128e700800000000000000000000000000000000000000000000000000000000815260206004820152602490fd5b6118b686611f24565b611842565b508460608701511061183d565b6118d0611743565b5060206040820180516001815180151580611932575b611924575b01905251511161187b576000606082015261190581611fe9565b6103076115ce6040516115c88161058160208201906002602083019252565b61192d86611f24565b6118eb565b50846060870151106118e6565b90611948611743565b50602060608301511015611719576115ce61030791604051906020820152602081526115c88161021d565b61197b611743565b506060810160208151101561171957604082019081515160001991828201918211611386576119ab828551611ee3565b51908051938414611386576001840190526001600160fd1b0383168303611386577f20000000000000000000000000000000000000000000000000000000000000006119fd9360031b1c179251611ee3565b5290565b91611a27906001600160a01b036103079593168452606060208501526060840190610fe5565b916040818403910152611019565b93906103079593611a6891611a76946001600160a01b03809216885216602087015260c0604087015260c0860190610fe5565b908482036060860152611019565b917ff470901a00000000000000000000000000000000000000000000000000000000608082015260a08184039101526104c8565b93906103079593611a6891611add946001600160a01b03809216885216602087015260c0604087015260c0860190610fe5565b917fde9abe5e00000000000000000000000000000000000000000000000000000000608082015260a08184039101526104c8565b93906103079593611a6891611b44946001600160a01b03809216885216602087015260c0604087015260c0860190610fe5565b917ffcd2e38100000000000000000000000000000000000000000000000000000000608082015260a08184039101526104c8565b93906103079593611a6891611bab946001600160a01b03809216885216602087015260c0604087015260c0860190610fe5565b917f38bf92e600000000000000000000000000000000000000000000000000000000608082015260a08184039101526104c8565b9290949391946001600160a01b0360a085019116845260209060a082860152865180915260c08501918060c08360051b8801019801926000905b838210611c6f57505050505084611c3b918461030796970360408601526104c8565b7f5bdaa9160000000000000000000000000000000000000000000000000000000060608401529160808184039101526104c8565b90919293988380611c8c60019360bf198c82030186528d516104c8565b9b019201920190939291611c19565b60046040820191825151151580611dc8575b611dba575b6000611cc861161283516001600160a01b031690565b60405193848092632d43cbef60e21b82525afa91821561089957600092611d9f575b5060208101928351611d02906001600160a01b031690565b9381519560808401968751966040519788926020840163ea9cd3bf60e01b90526024840192611d3093611a01565b0393601f19948581018852611d459088610277565b516001600160a01b031691516001600160a01b031692519651604051978894611d719460208701611aaa565b039081018452611d819084610277565b604051630556f18360e41b8152928392610872923060048601611bdf565b611db391923d8091833e61088a8183610277565b9038611cea565b611dc381611f24565b611cb2565b506020606082015110611cad565b60046040820191825151151580611ed5575b611ec7575b6000611e0361161283516001600160a01b031690565b60405193848092632d43cbef60e21b82525afa91821561089957600092611eac575b5060208101928351611e3d906001600160a01b031690565b9381519560808401968751966040519788926020840163ea9cd3bf60e01b90526024840192611e6b93611a01565b0393601f19948581018852611e809088610277565b516001600160a01b031691516001600160a01b031692519651604051978894611d719460208701611b11565b611ec091923d8091833e61088a8183610277565b9038611e25565b611ed081611f24565b611ded565b506020606082015110611de8565b80518210156105a75760209160051b010190565b6080611f219193929301519260ff845116938491600183018252611f1b8383611ee3565b52611ee3565b50565b604081019081515160001991828201918211611386576060611f47838651611ee3565b5191018051938414611386576001840190526001600160fd1b0383168303611386577fff00000000000000000000000000000000000000000000000000000000000000611f9a9360031b1c179251611ee3565b52565b60408101805151600019808201918211611386576060611fbe838551611ee3565b5194018051918214611386576001820190526001600160fd1b0381160361138657611f9a9151611ee3565b60408101908151516000199182820191821161138657606061200c838651611ee3565b5191018051938414611386576001840190526001600160fd1b0383168303611386577f0100000000000000000000000000000000000000000000000000000000000000611f9a9360031b1c179251611ee3565b60408101805151909291600019808301928311611386576060612083848751611ee3565b5192018051918214611386576001820190526001600160fd1b0381168103611386577fff00000000000000000000000000000000000000000000000000000000000000611f9a9460f81b169060031b1c179251611ee3565b9061158061211c9261158061158a6115858361158061157b60609a7f0000000000000000000000000000000000000000000000000000000000000000611781565b906004604080519361212d8561023e565b60008552818101938451511515908161222c575b5061221e575b600061215d61161283516001600160a01b031690565b835194858092632d43cbef60e21b82525afa92831561089957600093612203575b5060208101938451612196906001600160a01b031690565b94815196608084019788519786519889926020840163ea9cd3bf60e01b905260248401926121c393611a01565b0393601f199485810189526121d89089610277565b516001600160a01b031691516001600160a01b03169251975185519889946116b99460208701611b78565b61221791933d8091833e61088a8183610277565b913861217e565b61222781611f24565b612147565b602091508201511038612141565b61226d8161158061157b6060967f0000000000000000000000000000000000000000000000000000000000000000611781565b612275611743565b5060206040820180516001815180151580612315575b612307575b01905251511161187b57602091611580826000876122d19501526122b381611fe9565b61158a6115ce6040516115c8816105818a820190600a602083019252565b926122da611743565b508301511015611719576115ce6122f19183611ef7565b604051906122fe8261023e565b60008252611c9b565b61231086611f24565b612290565b5084898701511061228b565b6123548161158061157b6060957f0000000000000000000000000000000000000000000000000000000000000000611781565b9161235d611743565b50602060408401805160018151801515806123db575b6123cd575b01905251511161187b57826000611580926123b795015261239881611fe9565b61158a6115ce6040516115c88161058160208201906003602083019252565b604051906123c48261023e565b60008252611dd6565b6123d688611f24565b612378565b50848689015110612373565b60006103706123fc9261245b959436916102b5565b6002546040516bffffffffffffffffffffffff19606084901b1660208201526014815292509061246790601f1990612435603486610277565b604051968791602083016014916bffffffffffffffffffffffff199060601b1681520190565b03908101865285610277565b92604051612478816106f18161062a565b92600092919056fea264697066735822122057efd8edd61e828b8c697ad27a1b3e1aa9e8aa92e5b54cb205f22f0372e80d4464736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_ens": "The ENS registry address",
          "_graphqlUrl": "The offchain/l2 graphql endpoint url",
          "_l2ResolverCoinType": "The chainId at which the resolver resolves data from. 0 if storageLocation is offChain",
          "_nameWrapper": "The ENS name wrapper address",
          "_verifier": "The chain verifier address"
        }
      },
      "getStorageSlotsCallback(bytes,bytes)": {
        "details": "Internal callback function invoked by CCIP-Read in response to a `getStorageSlots` request."
      },
      "getTarget(bytes)": {
        "details": "Returns the L2 target address that can answer queries for `name`.",
        "params": {
          "name": "DNS encoded ENS name to query"
        },
        "returns": {
          "node": "The node of the name",
          "target": "The L2 resolver address to verify against."
        }
      },
      "metadata(bytes)": {
        "details": "This function provides metadata about the L1 Resolver, including its name, coin type, GraphQL URL, storage type, and encoded information.",
        "params": {
          "name": "The domain name in format (dnsEncoded)"
        },
        "returns": {
          "_0": "coinType The cointype of the chain the target contract locates such as Optimism, Base, Arb, etc",
          "_1": "graphqlUrl The GraphQL URL used by the resolver",
          "_2": "storageType Storage Type (0 for EVM)",
          "_3": "storageLocation The storage identifier. For EVM chains, this is the address of the resolver contract.",
          "_4": "context. An identifier used by l2 graph indexer for Domain schema id (`context-namehash`) allowing multiple resolver contracts to have own namespace."
        }
      },
      "resolve(bytes,bytes)": {
        "details": "Resolve and verify a record stored in l2 target address. It supports subname by fetching target recursively to the nearlest parent.",
        "params": {
          "data": "The actual calldata",
          "name": "DNS encoded ENS name to query"
        },
        "returns": {
          "result": "result of the call"
        }
      },
      "setTarget(bytes,address)": {
        "params": {
          "name": "The encoded name to query.",
          "target": "The L2 resolver address to verify against."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "metadata(bytes)": {
        "notice": "Get metadata about the L1 Resolver"
      },
      "setTarget(bytes,address)": {
        "notice": "Set target address to verify aagainst"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18375,
        "contract": "contracts/L1Resolver.sol:L1Resolver",
        "label": "targets",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 18392,
        "contract": "contracts/L1Resolver.sol:L1Resolver",
        "label": "graphqlUrl",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 18394,
        "contract": "contracts/L1Resolver.sol:L1Resolver",
        "label": "l2ResolverCoinType",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}